version: "3.5"

services:
  api01: &api
    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
    # publicamente acessível! Ex.: hub.docker.com
    #image: andersonef/rinha-node-2024:latest
    build: .
    hostname: api01
    volumes:
      - .:/var/app
    environment:
      - SERVER_ID=1
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=rinha
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - MAX_CONNECTION_POOL=50
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    
    # Não é necessário expor qualquer porta além da porta do load balancer,
    # mas é comum as pessoas o fazerem para testarem suas APIs e conectarem
    # ao banco de dados na fase de desenvolvimento.
    ports:
      - "8081:9999"
    depends_on:
      - db
#      - redis
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: "50MB"

  api02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api 
    hostname: api02
    volumes:
      - .:/var/app
    environment:
      - SERVER_ID=2
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=rinha
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - MAX_CONNECTION_POOL=50
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8082:9999"

  db:
    image: postgres:latest
#    command: postgres -c config_file=/etc/postgresql.conf
    ports:
      - "5431:5432"
    environment:
      - POSTGRES_DB=rinha
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./postgresql.conf:/etc/postgresql.conf
      - ./postgres.initdb.sql:/docker-entrypoint-initdb.d/init.sql
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "250MB"

#  redis:
#    image: redis:latest
#    deploy:
#      resources:
#        limits:
#          cpus: "0.1"
#          memory: "300MB"
 
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    ports:
        # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999" 
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "200MB"

# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
  default:
    driver: bridge
    name: rinha-nginx-2024q1
